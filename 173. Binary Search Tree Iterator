/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
private:
    stack<TreeNode*> mstack;
public:
    BSTIterator(TreeNode *root) {
        while(root!=NULL)
        {
            mstack.push(root);
            root=root->left;
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
       return !mstack.empty(); 
    }

    /** @return the next smallest number */
    int next() {
        TreeNode *tmp=mstack.top();
        mstack.pop();
        int res=tmp->val;
        tmp=tmp->right;
        while(tmp!=NULL)
        {
            mstack.push(tmp);
            tmp=tmp->left;
        }
        return res;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
