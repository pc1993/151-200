2个stack，2个vector，1个vector和一个int
class MinStack {
    private:
    stack<int> s1;
    stack<int> s2;
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        s1.push(x);
        if(s2.empty()||s2.top()>=x)
            s2.push(x);
    }
    
    void pop() {
        if(!s2.empty()&&s1.top()==s2.top())
            s2.pop();
        s1.pop();
    }
    
    int top() {
        return s1.top();
    }
    
    int getMin() {
        return s2.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 
 class MinStack {
    private:
    vector<int> mstore;
    int min;
public:
    /** initialize your data structure here. */
    MinStack() {
        min=INT_MAX;
    }
    
    void push(int x) {
        if(x<=min)
        {
            mstore.push_back(min);
            min=x;
        }
        mstore.push_back(x);
    }
    
    void pop() {
        int now=mstore.back();
        mstore.pop_back();
        if(now==min)
        {
            min=mstore.back();
            mstore.pop_back();
        }
    }
    
    int top() {
        return mstore.back();
    }
    
    int getMin() {
        return min;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
